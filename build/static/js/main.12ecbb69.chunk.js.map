{"version":3,"sources":["components/MyLayers.js","components/Map.js","classes/Helper.js","classes/Position.js","classes/Person.js","components/Filter.js","components/Info.js","components/PersonPanel.js","components/RightPanel.js","components/App.js","index.js"],"names":["MyLayers","props","console","log","Date","now","map","useMap","Object","values","people","person","peopleState","name","isShown","getLayerGroup","addTo","L","Icon","Default","prototype","_getIconUrl","mergeOptions","iconUrl","iconRetinaUrl","shadowUrl","center","Map","MapContainer","zoom","scrollWheelZoom","TileLayer","url","generateBoatIcon","color","color2","divIcon","html","className","iconSize","iconAnchor","numberToDateString","date","type","substring","numberToTimeString","str","substr","Color","this","current","names","val","length","percent","f","parseInt","slice","t","p","R","G","B","Math","round","toString","Position","pos","lt","lg","da","time","ti","id","problem","icons","marker","icon","riseOnHover","bindPopup","position","popupText","Person","polylines","positions","markers","problems","layerGroup","state","lastPos","tmpPolyline","checkDate","checkProblem","insertPolyline","push","getMarker","concat","posDate","diff","obj","text","polylineText","dashArray","polyline","startDate","endDate","Filter","style","display","Form","Check","checked","isChecked","onChange","togglePerson","width","marginTop","marginBottom","e","setDate","target","value","yyyymmdd","marginLeft","Component","Info","list","key","index","Accordion","Item","eventKey","Header","Body","Table","striped","bordered","hover","PersonPanel","padding","border","RightPanel","overflowY","height","keys","mm","getMonth","dd","getDate","getFullYear","join","App","axios","get","then","res","colorGen","data","undefined","na","getNext","update","setState","tmp","assign","remove","a","layerGroups","Container","fluid","Row","Col","md","bind","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12ecbb69.chunk.js","sourcesContent":["import {useMap} from \"react-leaflet\";\nimport React, {useEffect} from \"react\";\n\nlet oldState = [];\n\nfunction MyLayers(props) {\n    console.log(\"My layers\", Date.now())\n    const map = useMap();\n\n\n\n    Object.values(props.people).map(person => {\n\n        if (props.peopleState[person.name].isShown) {\n                person.getLayerGroup().addTo(map)\n        }\n    })\n    return null\n\n}\n\nexport default MyLayers;\n","import {MapContainer, TileLayer,} from \"react-leaflet\";\nimport React from \"react\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"../css/styles.css\";\nimport MyLayers from \"./MyLayers\";\n\n//default icons fix\ndelete L.Icon.Default.prototype._getIconUrl;\nL.Icon.Default.mergeOptions({\n    iconUrl: \"/static/images/marker-icon.png\",\n    iconRetinaUrl: \"/static/images/marker-icon-2x.png\",\n    shadowUrl: \"/static/images/marker-shadow.png\",\n});\n\nlet center = [36.08851338894426, 10.80333970970808];\n\nfunction Map(props) {\n\n    console.log(\"start render Map\", Date.now())\n\n    return (\n        <MapContainer center={center} zoom={7.8} scrollWheelZoom={false} >\n            <TileLayer\n                url={\n                    \"https://stamen-tiles-{s}.a.ssl.fastly.net/watercolor/{z}/{x}/{y}.jpg\"\n                }\n            />\n            <MyLayers people={props.people} peopleState={props.peopleState}/>\n        </MapContainer>\n    );\n\n}\n\nexport default Map;\n","import L from 'leaflet'\n\nexport function generateBoatIcon(color = \"black\", color2 = \"black\") {\n    return L.divIcon({\n        html: `<svg \n height=\"24\"\n  viewBox=\"0 0 512 512\"\n   width=\"24\"\n   preserveAspectRatio=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\">\n    <g>\n    <path d=\"m90.997 364.003h119.998v-216.821l-132.375 193.347c-6.805 9.94.33 23.474 12.377 23.474z\" fill=\"` + color + `\"> </path>\n    <path d=\"m488.49 391.572h-224.999v-27.569h149.997c8.28 0 15-6.72 15-15 0-45.429-9.19-87.148-27.32-124.008-29.039-59.049-81.459-104.268-137.677-127.378v-82.608c0-10.61-10.75-17.85-20.55-13.93-.05.02-.09.04-.14.05-4.03 1.66-89.908 36.969-90.008 37.009-12.31 5.06-12.39 22.51-.13 27.69l80.829 34.129v291.615h-209.994c-9.217 0-16.388 8.233-14.803 17.86 16.103 105.627 13.38 87.765 13.693 89.818 1.112 7.331 7.414 12.75 14.83 12.75h335.291c51.636 0 97.805-29.107 120.101-73.312.075.006.152.007.227.013 4.44-8.93 7.89-18.39 10.24-28.21 2.365-9.88-4.925-18.919-14.587-18.919zm-224.999-248.235c40.059 49.959 40.119 120.338 0 170.367z\" fill=\"` + color2 + `\" ></path>\n    </g></svg>`,\n        className: \"dummy\",\n        iconSize: [0, 0],\n        iconAnchor: [12, 12],\n    });\n}\n\nexport function numberToDateString(date, type = 0) {\n    if (!type) {\n        return date.substring(6, 8) + '/' + date.substring(4, 6) + '/' + date.substring(0, 4);\n    }\n    if (type === 1) {\n        return date.substring(0, 4) + '-' + date.substring(4, 6) + '-' + date.substring(6, 8);\n    }\n}\n\nexport function numberToTimeString(str) {\n    return str.substr(0, 2) + ':' + str.substr(2, 2)\n}\n\nexport function popupText(position, name, type = 1) {\n    if (type)\n        return '<p style=\"text-align:center;\">' + name +\n            '<br>(' + position.lt + ' , ' + position.lg + ')' +\n            '<br>' + numberToDateString(position.date) + \" at \" + numberToTimeString(position.time) +\n            '</p>'\n\n}\n\n\nexport class Color {\n    constructor() {\n        this.current = 0;\n        this.names = [\n            \"#00ffff\", \"#ff00ff\", \"#ffff00\", \"#ffffff\",\n            \"#ffb6c1\",\"#ffa500\",  \"#00ff00\",\"#bdb76b\",\n            \"#00008b\", \"#008b8b\", \"#a9a9a9\", \"#006400\",\n            \"#9932cc\", \"#e9967a\",\n            \"#add8e6\", \"#e0ffff\", \"#90ee90\", \"#d3d3d3\",\n            \"#808000\", \"#ffc0cb\", \"#800080\",\n            \"#00ff00\", \"#0000ff\", \"#f0ffff\", \"#f5f5dc\",\n            \"#8b008b\", \"#556b2f\", \"#ff8c00\",\n            \"#ffd700\", \"#008000\", \"#4b0082\", \"#f0e68c\",\n             \"#ffffe0\", \"#000080\",\n            \"#800080\", \"#c0c0c0\",\n        ]\n    }\n\n    getNext() {\n        let val = this.names[this.current];\n        this.current++;\n        this.current %= this.names.length;\n        return val\n    }\n\n    shadeHexColor(color, percent) {\n        var f = parseInt(color.slice(1), 16), t = percent < 0 ? 0 : 255, p = percent < 0 ? percent * -1 : percent,\n            R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF;\n        return \"#\" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1);\n    }\n\n}\n\n/**\n *\n * @param {Date} date\n * @returns {number|string|*}\n * @constructor\n */\nexport function dateToString(date) {\n}","import React from \"react\";\nimport {popupText} from \"./Helper\";\nimport L from \"leaflet\"\n\nexport class Position {\n    constructor(pos) {\n        this.lt = pos.lt\n        this.lg = pos.lg\n        this.date = pos.da\n        this.time = pos.ti\n        this.id = pos.id\n    }\n\n    getMarker(problem, name, icons) {\n        return L.marker([this.lt, this.lg], {\n            icon: problem ? icons[1] : icons[0],\n            riseOnHover: true\n        }).bindPopup(popupText(this, name))\n\n    }\n\n\n}\n\n\n\n\n","import {numberToDateString, numberToTimeString} from \"./Helper\";\nimport React from \"react\";\nimport L from \"leaflet\"\n\nexport class Person {\n    constructor(name) {\n        this.name = name;\n    }\n\n    polylines = [];\n    name = \"\";\n    /**\n     * @type {Position[]}\n     */\n    positions = []\n    markers = []\n    problems = []\n    layerGroup = L.layerGroup();\n    color;\n    icons;\n\n\n    update(state) {\n\n        let lastPos = null\n        let tmpPolyline = [];\n        let pos;\n        this.markers = []\n        this.polylines = []\n        this.problems = []\n        if (!state.isShown) return;\n\n        for (pos of this.positions) {\n\n            if (!this.checkDate(pos, state)) continue;\n\n            let problem = false;\n            if (lastPos && this.checkProblem(pos, lastPos)) {\n                this.insertPolyline(tmpPolyline, pos)\n                tmpPolyline = [[lastPos.lt, lastPos.lg], [pos.lt, pos.lg]];\n                this.insertPolyline(tmpPolyline, pos, \"b\", true, lastPos)\n                tmpPolyline = []\n                problem = true;\n                this.problems.push([pos, lastPos])\n            }\n\n            tmpPolyline.push([pos.lt, pos.lg])\n            this.markers.push(pos.getMarker(problem, this.name, this.icons))\n            lastPos = pos\n        }\n        this.insertPolyline(tmpPolyline, pos, \"c\")\n\n        this.layerGroup = L.layerGroup(this.polylines.concat(this.markers))\n\n    }\n\n    getLayerGroup() {\n        return this.layerGroup\n    }\n\n\n    /**\n     * checks if the time differance between two positions is more than 2 hours\n     * @param {Position} position the more recent position\n     * @param {Position} lastPos the previous position\n     * @return {Boolean} if there's a problem return true, false otherwise\n     */\n    checkProblem(position, lastPos) {\n        // combines pos.DA and pos.TI to make a Date object\n        let posDate = new Date(numberToDateString(position.date, 1) + \" \" + numberToTimeString(position.time));\n        let lastPosDate = new Date(numberToDateString(lastPos.date, 1) + \" \" + numberToTimeString(lastPos.time));\n\n        //diff contains the difference between the two positions in milliseconds\n        let diff = lastPosDate - posDate;\n        // contains the difference in minutes\n        diff = diff / 1000 / 60\n        return diff > 120;\n\n\n    }\n\n    /**\n     * takes a list of coordinates and inserts Polyline component to the polyline array\n     * @param {Array} tmpPolyline array containing coordinates\n     * @param {Position} pos\n     * @param ref a variable used to make sure that keys are unique\n     * @param {boolean} problem is the current polyline in a state of a problem?\n     * @param {Position} lastPos  last position\n     */\n    insertPolyline(tmpPolyline, pos, ref = \"a\", problem = false, lastPos = null) {\n        /** if array contains less than one item than it can't form a polyline */\n        if (tmpPolyline.length <= 1) return;\n\n        let obj, text\n\n        let polylineText = (pos, problem = false, lastPos = null) => {\n            if (problem) {\n                return this.name + \" \" + numberToDateString(lastPos.date) + \" \" + numberToTimeString(lastPos.time) + \" => \" +\n                    numberToDateString(pos.date) + \" \" + numberToTimeString(pos.time)\n            }\n            return '<p style=\"text-align:center;\">this.name</p>'\n        }\n\n        /** generates obj which contains information about the type of line\n         * and text which is the inner text if the popup\n         */\n        if (problem) {\n            obj = {color: 'red', dashArray: \"20,20\"}\n            text = polylineText(pos, problem, lastPos)\n\n\n        } else {\n            obj = {color: this.color};\n            text = polylineText(pos)\n        }\n\n        /** creates the Polyline and pushes it to the array */\n        this.polylines.push(\n            L.polyline(tmpPolyline, obj).bindPopup(text)\n        );\n\n    }\n\n    checkDate(pos, state) {\n        let date = new Date(numberToDateString(pos.date, 1));\n        return state.startDate <= date && date <= state.endDate;\n    }\n}","import {Form} from \"react-bootstrap\";\nimport {Component} from \"react\";\nimport {dateToString} from \"../classes/Helper\";\n\nclass Filter extends Component {\n    render() {\n        return (\n            <div>\n\n                <div style={{display: \"flex\"}}>\n                    <Form.Check\n                        type=\"switch\"\n                        id=\"custom-switch\"\n                        checked={this.props.isChecked}\n                        onChange={() => {\n                            this.props.togglePerson(this.props.name);\n                        }}\n                    />\n                    <span>{this.props.name}</span>\n                </div>\n\n                <hr style={{width: \"25%\"}}/>\n\n                <div style={{\n                    marginTop: \"5px\",\n                    marginBottom: \"10px\"\n                }}>\n                    <strong>Date Filter:</strong>\n                    <br/>\n                    <span> from:\n                        <input\n                            type=\"date\"\n                            onChange={(e) => this.props.setDate(this.props.name,0,e.target.value)}\n                            value={(this.props.startDate).yyyymmdd()}\n                        />\n                    </span>\n                    <span style={{marginLeft: \"10px\"}}> to:\n                        <input\n                            type=\"date\"\n                            onChange={(e) => this.props.setDate(this.props.name,1,e.target.value)}\n                            value={(this.props.endDate).yyyymmdd()}\n                        />\n                    </span>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Filter;\n","import React from 'react';\nimport {numberToDateString, numberToTimeString} from \"../classes/Helper\";\nimport {Accordion, Table} from \"react-bootstrap\";\nfunction Info(props) {\n    let list = props.problems.map((key, index) => {\n        return (\n            <tr key={key[0].id+key[1].id}>\n                <td>{index+1}</td>\n                <td>{numberToDateString(key[0].date)} {numberToTimeString(key[0].time)}< /td>\n                <td>({key[0].lt} , {key[0].lg})</td>\n                <td>{numberToDateString(key[1].date)} {numberToTimeString(key[1].time)}</td>\n                <td>({key[1].lt} , {key[1].lg})</td>\n            </tr>\n        )\n    })\n\n\n    return (\n        <Accordion>\n            <Accordion.Item eventKey=\"0\">\n                <Accordion.Header>Infractions ({list.length})</Accordion.Header>\n                <Accordion.Body>\n                    <Table striped bordered hover>\n                        <thead>\n                        <tr>\n                            <th>#</th>\n                            <th>time 1</th>\n                            <th>position 1</th>\n                            <th>time 2</th>\n                            <th>position 2</th>\n                        </tr>\n                        </thead>\n                        <tbody>\n                        {list}\n                        </tbody>\n                    </Table>\n                </Accordion.Body>\n            </Accordion.Item>\n            <Accordion.Item eventKey=\"1\">\n                <Accordion.Header>SOS</Accordion.Header>\n                <Accordion.Body>\n                    abc\n                </Accordion.Body>\n            </Accordion.Item>\n        </Accordion>\n    )\n\n}\n\nexport default Info;","import {Component} from \"react\";\nimport Filter from \"./Filter\";\nimport Info from \"./Info\";\n\nclass PersonPanel extends Component {\n    render() {\n        return (\n            <div style={{\n                padding: \"10px 3px\",\n                border: \"2px #7e8182 solid\",\n                marginTop: \"4px\"\n\n            }}>\n                <div>\n                    <Filter\n                        isChecked={this.props.checked}\n                        startDate={this.props.startDate}\n                        endDate={this.props.endDate}\n                        name={this.props.name}\n                        togglePerson={this.props.togglePerson}\n                        setDate={this.props.setDate}\n\n                    />\n                </div>\n                <Info problems={this.props.problems}/>\n\n\n            </div>\n        );\n    }\n}\n\nexport default PersonPanel;\n","import {Component} from \"react\";\nimport PersonPanel from \"./PersonPanel\";\n\nclass RightPanel extends Component {\n    render() {\n        let {peopleState} = this.props;\n        let {problems}=this.props\n        return (\n            <div style={{\n                overflowY: 'scroll',\n                height: '100vh',\n            }}>\n                {Object.keys(peopleState).map((key) => (\n                    <PersonPanel\n                        key={key}\n                        name={key}\n                        checked={peopleState[key].isShown}\n                        startDate={peopleState[key].startDate}\n                        endDate={peopleState[key].endDate}\n                        togglePerson={this.props.togglePerson}\n                        setDate={this.props.setDate}\n                        problems={problems[key]}\n                    />\n                ))}\n            </div>\n        );\n    }\n}\n\nexport default RightPanel;\n","import React, {Component} from \"react\";\nimport axios from \"axios\";\nimport Map from \"./Map\";\nimport {Col, Container, Row} from \"react-bootstrap\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport {Color, generateBoatIcon} from \"../classes/Helper\";\nimport {Position} from \"../classes/Position\";\nimport {Person} from \"../classes/Person\";\nimport RightPanel from \"./RightPanel\";\n\nDate.prototype.yyyymmdd = function () {\n    const mm = this.getMonth() + 1; // getMonth() is zero-based\n    const dd = this.getDate();\n\n    return [this.getFullYear(),\n        (mm > 9 ? '' : '0') + mm,\n        (dd > 9 ? '' : '0') + dd\n    ].join('-');\n};\n\nexport let usefulValues = [];\n\nlet peopleState = [];\nlet people = [];\n\nclass App extends Component {\n    state = {\n        peopleState: []\n    }\n\n\n    componentDidMount() {\n        console.log(\"start ComponentDidMount\", Date.now())\n        axios.get(\"/api\").then((res) => {\n                // people = []\n                console.log(\"start axios\", Date.now())\n                let colorGen = new Color();\n                for (let pos of res.data) {\n                    if (people[pos.na] === undefined) {\n                        people[pos.na] = new Person(pos.na)\n                        let color = colorGen.getNext()\n\n                        people[pos.na].icons = [generateBoatIcon(color), generateBoatIcon(color, \"red\")];\n                        people[pos.na].color = color\n\n                        peopleState[pos.na] = {\n                            isShown: true,\n                            startDate: new Date(\"2021-01-01\"),\n                            endDate: new Date(\"2022-01-01\"),\n                        }\n\n                    }\n                    people[pos.na].positions.push(new Position(pos))\n                }\n                Object.values(people).map(person => person.update({\n                    isShown: true,\n                    startDate: new Date(\"2021-01-01\"),\n                    endDate: new Date(\"2022-01-01\"),\n                }))\n                this.setState({peopleState: peopleState})\n            }\n        )\n\n    }\n\n    /**\n     * The filter event handler function that shows or hides the layerGroup of one person\n     * @param {String} name the name of the person to hide or show\n     */\n    togglePerson(name) {\n        console.log(name)\n        let tmp = Object.assign({}, this.state.peopleState);\n        tmp[name].isShown = !tmp[name].isShown;\n        people[name].layerGroup.remove();\n\n        this.setState({peopleState: tmp});\n    }\n\n    setDate(name, type, a) {\n        let tmp = Object.assign({}, this.state.peopleState);\n        if (type === 0)\n            tmp[name].startDate = new Date(a);\n        else\n            tmp[name].endDate = new Date(a);\n        people[name].layerGroup.remove();\n        people[name].update(tmp[name])\n        this.setState({layerGroups: tmp})\n\n\n    }\n\n    render() {\n        console.log(\"start render\", Date.now())\n        /**\n         *\n         * @type {Person[]}\n         */\n        let problems = [];\n        Object.values(people).map((person) => {\n            problems[person.name] = person.problems\n        })\n\n\n        return (\n            <div>\n                <Container fluid={true}>\n                    <Row  >\n                        <Col lg={8} md={12}>\n                            <Map people={people} peopleState={this.state.peopleState}/>\n                        </Col>\n                        <Col lg={4} md={12}>\n                            <RightPanel\n                                peopleState={peopleState}\n                                togglePerson={this.togglePerson.bind(this)}\n                                setDate={this.setDate.bind(this)}\n                                problems={problems}\n                            />\n\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}